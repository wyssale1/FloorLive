---
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/astro/Header.astro';
import GameCard from '../components/astro/GameCard.astro';

// Mock data for games page
const allGames = [
  {
    id: 1,
    homeTeam: "ZSC Lions",
    awayTeam: "HC Davos",
    homeScore: 2,
    awayScore: 1,
    period: "Final",
    timeRemaining: "",
    league: "NLA",
    homeLogo: "/zsc-lions-logo.png",
    awayLogo: "/hc-davos-logo.png",
    date: "Today",
    status: "finished"
  },
  {
    id: 2,
    homeTeam: "Floorball KÃ¶niz",
    awayTeam: "UHC Alligator Malans",
    homeScore: 0,
    awayScore: 3,
    period: "3rd Period",
    timeRemaining: "05:22",
    league: "NLA",
    homeLogo: "/floorball-k-niz-logo.png",
    awayLogo: "/uhc-alligator-malans-logo.png",
    date: "Today",
    status: "live"
  },
  {
    id: 3,
    homeTeam: "Unihockey Basel Regio",
    awayTeam: "SV Wiler-Ersigen",
    startTime: "19:30",
    venue: "Sporthalle Basel",
    league: "NLA",
    homeLogo: "/unihockey-basel-regio-logo.png",
    awayLogo: "/sv-wiler-ersigen-logo.png",
    date: "Today",
    status: "scheduled"
  },
  {
    id: 4,
    homeTeam: "UHC Thun",
    awayTeam: "Floorball Thurgau",
    startTime: "20:00",
    venue: "Grabenhalle Thun",
    league: "NLB",
    homeLogo: "/uhc-thun-logo.png",
    awayLogo: "/floorball-thurgau-logo.png",
    date: "Today",
    status: "scheduled"
  },
  {
    id: 5,
    homeTeam: "Grasshopper Club",
    awayTeam: "UHC Dietlikon",
    homeScore: 4,
    awayScore: 2,
    date: "Yesterday",
    league: "NLA",
    homeLogo: "/grasshopper-club-logo.png",
    awayLogo: "/uhc-dietlikon-logo.png",
    status: "finished"
  },
  {
    id: 6,
    homeTeam: "Floorball Winterthur",
    awayTeam: "UHC Uster",
    homeScore: 1,
    awayScore: 5,
    date: "Yesterday",
    league: "NLB",
    homeLogo: "/floorball-winterthur-logo.png",
    awayLogo: "/uhc-uster-logo.png",
    status: "finished"
  }
];

const liveGames = allGames.filter(game => game.status === "live");
const todaysGames = allGames.filter(game => game.status === "scheduled");
const finishedGames = allGames.filter(game => game.status === "finished");
---

<BaseLayout title="Games - Unihockey Live Tracker">
  <div class="min-h-screen bg-background">
    <Header />

    <main class="container mx-auto px-3 py-6 space-y-6">
      <div class="flex items-center justify-between">
        <h1 class="text-2xl font-bold text-foreground">All Games</h1>
        <div class="flex items-center space-x-2">
          <span class="text-sm text-muted-foreground">Updated just now</span>
          <button class="p-2 hover:bg-muted rounded-full transition-colors">
            <svg class="w-4 h-4 text-muted-foreground" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
          </button>
        </div>
      </div>

      {liveGames.length > 0 && (
        <section>
          <div class="flex items-center space-x-2 mb-3">
            <div class="w-2 h-2 bg-primary rounded-full animate-pulse"></div>
            <h2 class="text-lg font-semibold text-foreground">Live Games</h2>
            <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-primary/10 text-primary">
              {liveGames.length}
            </span>
          </div>
          <div class="bg-primary/5 rounded-lg overflow-hidden border">
            {liveGames.map((game) => (
              <GameCard game={game} type="live" showBorder={false} />
            ))}
          </div>
        </section>
      )}

      <section>
        <div class="flex items-center space-x-2 mb-3">
          <h2 class="text-lg font-semibold text-foreground">Today's Games</h2>
          <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium border border-gray-200 text-gray-700">
            {todaysGames.length} games
          </span>
        </div>
        <div class="bg-muted/20 rounded-lg overflow-hidden border">
          {todaysGames.map((game) => (
            <GameCard game={game} type="upcoming" showBorder={false} />
          ))}
        </div>
      </section>

      <section>
        <div class="flex items-center space-x-2 mb-3">
          <h2 class="text-lg font-semibold text-foreground">Recent Results</h2>
          <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium border border-gray-200 text-gray-700">
            {finishedGames.length} results
          </span>
        </div>
        <div class="bg-muted/10 rounded-lg overflow-hidden border">
          {finishedGames.map((game) => (
            <GameCard game={game} type="recent" showBorder={false} />
          ))}
        </div>
      </section>
    </main>
  </div>
</BaseLayout>